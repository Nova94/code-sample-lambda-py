
service: code-sample-lambda-py
frameworkVersion: ">=1.0.0 <2.0.0"


provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-west-2
  memorySize: 128
  timeout: 2
  logRetentionInDays: 7

  usagePlan:
    quota:
      limit: 1000000
      period: MONTH
    throttle:
      burstLimit: 200
      rateLimit: 100

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:DeleteItem'
      Resource:
        "Fn::GetAtt": [ KeyValueTable, Arn ]
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        "Ref": OnErrorTopic
  environment:
    tableName: ${self:provider.stage}-${self:service}-kv
    keyName: 'Key'
    ttlName: 'Expires'

# you can add packaging information here
package:
  include:
    - handler.py

functions:
  kvGet:
    handler: handler.get
    events:
      - http:
          path: 'key/{id}'
          method: get
    onError:
      "Ref": OnErrorTopic

  kvCreate:
    handler: handler.create
    events:
      - http:
          path: 'key'
          method: post
          cors: true
    onError:
      "Ref": OnErrorTopic


  kvUpdate: # dynamodb put_item overrides previous entry, but since K-V store only. it is ok to use create function
    handler: handler.create
    events:
      - http:
          path: 'key/{id}'
          method: put
          cors: true
    onError:
      "Ref": OnErrorTopic

  kvDelete:
    handler: handler.delete
    events:
      - http:
          path: 'key/{id}'
          method: delete
          cors: true
    onError:
      "Ref": OnErrorTopic

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    KeyValueTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-${self:service}-kv
        AttributeDefinitions:
          - AttributeName: ${self:provider.environment.keyName}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:provider.environment.keyName}
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: ${self:provider.environment.ttlName}
          Enabled: true
    OnErrorTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: ${self:service}-OnError
        TopicName: ${self:service}-${self:provider.stage}-on-error
  Outputs:
    UsersTableArn:
      Description: The ARN for kv table
      Value:
        "Fn::GetAtt": [ KeyValueTable, Arn ]
      Export:
        Name: ${self:service}:${self:provider.stage}:KeyValueTable
